{"name":"GoldRaccoon","tagline":"An iOS component that allow you to connect to a FTP service and perform the operations you need.","body":"## General Notes\r\n\r\n[GoldRaccoon](http://albertodebortoli.github.io/GoldRaccoon/) is a iOS component that allow you to connect to a FTP service and do the following:\r\n\r\n*\tDownload a file\r\n*\tUpload a file\r\n*\tDelete a file\r\n*\tCreate a directory\r\n*\tDelete a directory\r\n*\tList a directory\r\n\r\n## Why another Raccoon? \r\n\r\nFirst, because the humanity needs it.\r\n\r\nThis project started on 29/06/2013 for the Objective-C Hackathon (http://objectivechackathon.appspot.com/).\r\n\r\n[GoldRaccoon](https://github.com/albertodebortoli/GoldRaccoon) aims to be an evolution of [BlackRaccoon](https://github.com/lloydsargent/BlackRaccoon) (which is an evolution of [WhiteRaccoon](https://github.com/valentinradu/WhiteRaccoon)), maybe the best (or at least one of the few) third-party component out there for handling FTP operations on iOS.\r\n\r\nI forked the public repo of BlackRaccooon in May 2013 and added some improvements that have been merged into master to BlackRaccoon. Even though BlackRaccoon does what it says, I prefer to clean it a little and use a different and more extensible code structure.\r\n\r\nMost of the code is therefore written by [Valentin Radu](https://github.com/valentinradu) and [Lloyd Sargent](https://github.com/lloydsargent), the main extensions I ([Alberto De Bortoli](https://github.com/albertodebortoli)) added are:\r\n\r\n- Done some deep refactoring for the bloating of the previous code;\r\n- Added missing (and reasonable) code conventions;\r\n- Added GRRequestsManager to manage all the different kind of requests using a FIFO queue;\r\n- Added a demo project.\r\n\r\n## Usage\r\n\r\nIf you'd like to include this component as a pod using [CocoaPods](http://cocoapods.org/), just add the following line to your Podfile:\r\n\r\n`pod \"GoldRaccoon\"`\r\n\r\notherwise\r\n\r\n- copy Sources folder into your project\r\n- add CFNetwork framework\r\n- import `GRRequestsManager.h` in your class\r\n- add a property for the manager\r\n\r\n``` objective-c\r\n@property (nonatomic, strong) GRRequestsManager *requestsManager;\r\n```\r\n\r\n- setup the manager somewhere (with hostname, username and password)\r\n\r\n``` objective-c\r\nself.requestsManager = [[GRRequestsManager alloc] initWithHostname:<hostname>\r\n                                                              user:<username>\r\n                                                          password:<password>];\r\n```\r\n\r\n- optionally make your class conform to `GRRequestsManagerDelegate`, implement the delegate methods (basically success, failure and progress callbacks) and set your instance of this class as delegate for the manager\r\n\r\n``` objective-c\r\nself.requestsManager.delegate = self;\r\n```\r\n\r\n- add the requests to the manager using the following methods:\r\n\r\n``` objective-c\r\naddRequestForListDirectoryAtPath:\r\naddRequestForCreateDirectoryAtPath:\r\naddRequestForDeleteFileAtPath:\r\naddRequestForDeleteDirectoryAtPath:\r\naddRequestForDownloadFileAtRemotePath:toLocalPath:\r\naddRequestForUploadFileAtLocalPath:toRemotePath:\r\n```\r\n\r\n- start the manager\r\n\r\n``` objective-c\r\n[self.requestsManager startProcessingRequests];\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}